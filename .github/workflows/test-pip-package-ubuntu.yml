# Test a package built and installed by pip.
#
# Test ISOFIT on a variety of versions of Python. This test suite is likely
# sufficient for broadly testing the 'pip' package, with the assumption that
# users are able to get all dependencies installed. Any further testing should
# be for a specific environment, and be very targeted. For example, testing
# Ubuntu 22.04 package ecosystem should be done by building a deb for ISOFIT,
# and testing against the Python packages provided by the apt package repo.
#
# Readers looking at this file for the purposes of installing ISOFIT on their
# system should be aware that these tests run inside a virtual environment.
# Be aware that both 'pip' and 'apt/apt-get' can both be used to install Python
# packages, but pip installing something with Ubuntu's system Python will
# conflict with packages installed via 'apt/apt-get', and produce an environment
# that is difficult to unwind.

name: Test Pip Package

# !! This is wrong !!
on:
  push:
    branches: ["dev", "main"]
  pull_request:
    branches: ["dev", "main"]

jobs:

  test:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # Python 3.12 cannot be tested until Ray provides support:
        #   https://github.com/ray-project/ray/issues/40211
        python-version: ["3.8", "3.9", "3.10", "3.11"]
        pytest-flags: ["-k 'not cli'", ""]

    steps:

      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install ISOFIT and most software dependencies
        shell: bash
        run: |

          ######################################################################
          # Non-Python Dependencies

          # Install the core GDAL library from the upstream Ubuntu package
          # repository. Note that 'libgdal-dev' provides the '$ gdal-config'
          # executable, which we need to install the GDAL Python bindings.
          sudo apt-get install python3 gdal-bin libgdal-dev


          ######################################################################
          # Python Packaging Dependencies

          # Having 'wheel' triggers a bunch of new Python packaging machinery
          # that will eventually become the default.
          python3 -m pip install pip setuptools wheel --upgrade
          python3 --version
          python3 -m pip show pip setuptools wheel


          ######################################################################
          # Python 'gdal' Package

          .github/workflows/install-python-gdal.sh


          ######################################################################
          # Install 'isofit'

          python3 -m pip install ".[test]"

      - name: Download and build 6S
        if: ${{ matrix.pytest-flags == '' }}
        shell: bash
        run: |
          # Could cache this: https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows
          ./download-and-build-6s.sh

      - name: Install ISOFIT data dependencies
        if: ${{ matrix.pytest-flags == '' }}
        shell: bash
        run: |
          # Could cache this: https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows
          ./download-and-unpack-sRTMnet.sh

      - name: Execute tests
        shell: bash
        run: |
          ./run-tests.sh ${{ matrix.pytest-flags }}
